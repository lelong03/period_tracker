import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      colorScheme: colorScheme,
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            side: BorderSide(
              color: appTheme.gray200,
              width: 1,
            ),
            borderRadius: BorderRadius.circular(
              8,
            ),
          ),
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: appTheme.deepOrange300,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(
              8,
            ),
          ),
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateProperty.all<Color>(appTheme.deepOrange300),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: appTheme.deepOrange300,
      ),
      textTheme: TextTheme(
        bodyMedium: TextStyle(
          color: appTheme.gray400,
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'Quicksand',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.blueGray400,
          fontSize: getFontSize(
            12,
          ),
          fontFamily: 'KoHo',
          fontWeight: FontWeight.w400,
        ),
        labelMedium: TextStyle(
          color: appTheme.gray900,
          fontSize: getFontSize(
            11,
          ),
          fontFamily: 'Quicksand',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: appTheme.gray900,
          fontSize: getFontSize(
            16,
          ),
          fontFamily: 'Quicksand',
          fontWeight: FontWeight.w700,
        ),
        bodyLarge: TextStyle(
          color: appTheme.gray900,
          fontSize: getFontSize(
            16,
          ),
          fontFamily: 'KoHo',
          fontWeight: FontWeight.w400,
        ),
        titleSmall: TextStyle(
          color: appTheme.gray900,
          fontSize: getFontSize(
            14,
          ),
          fontFamily: 'Quicksand',
          fontWeight: FontWeight.w700,
        ),
        labelSmall: TextStyle(
          color: appTheme.gray900,
          fontSize: getFontSize(
            8,
          ),
          fontFamily: 'Quicksand',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.gray900,
          fontSize: getFontSize(
            20,
          ),
          fontFamily: 'Quicksand',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray900,
          fontSize: getFontSize(
            12,
          ),
          fontFamily: 'Quicksand',
          fontWeight: FontWeight.w500,
        ),
        headlineSmall: TextStyle(
          color: appTheme.gray900,
          fontSize: getFontSize(
            24,
          ),
          fontFamily: 'Quicksand',
          fontWeight: FontWeight.w700,
        ),
      ),
      visualDensity: VisualDensity.standard,
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    background: Color(0XFF4832D8),
    error: Color(0XFF333333),
    errorContainer: Color(0XFFB6ABFF),
    inversePrimary: Color(0XFF4832D8),
    inverseSurface: Color(0XFF333333),
    onBackground: Color(0XFFFFFFFF),
    onError: Color(0XFFFFFFFF),
    onErrorContainer: Color(0XFF1A1D1F),
    onInverseSurface: Color(0XFFFFFFFF),
    onPrimary: Color(0XFF333333),
    onPrimaryContainer: Color(0XFFFFFFFF),
    onSecondary: Color(0XFFFFFFFF),
    onSecondaryContainer: Color(0XFF333333),
    onSurface: Color(0XFFFFFFFF),
    onSurfaceVariant: Color(0XFF333333),
    onTertiary: Color(0XFFFFFFFF),
    onTertiaryContainer: Color(0XFF333333),
    outline: Color(0XFF333333),
    outlineVariant: Color(0XFF4832D8),
    primary: Color(0XFFFFFFFF),
    primaryContainer: Color(0XFF4832D8),
    scrim: Color(0XFF4832D8),
    secondary: Color(0XFF4832D8),
    secondaryContainer: Color(0XFFDBDFE6),
    shadow: Color(0XFF333333),
    surface: Color(0XFF4832D8),
    surfaceTint: Color(0XFF333333),
    surfaceVariant: Color(0XFFDBDFE6),
    tertiary: Color(0XFF4832D8),
    tertiaryContainer: Color(0XFFDBDFE6),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber400 => Color(0XFFFFC020);
  // Black
  Color get black900 => Color(0XFF000000);
  // Blackf
  Color get black9000f => Color(0X0F000000);
  // Blue
  Color get blueA200 => Color(0XFF3C79E6);
  Color get blueA20001 => Color(0XFF4085EB);
  Color get blueA400 => Color(0XFF337FFF);
  // BlueGray
  Color get blueGray100 => Color(0XFFCECECE);
  Color get blueGray10001 => Color(0XFFD9D9D9);
  Color get blueGray400 => Color(0XFF898989);
  Color get blueGray40001 => Color(0XFF888888);
  // DeepOrange
  Color get deepOrange200 => Color(0XFFEFC399);
  Color get deepOrange300 => Color(0XFFFD7B5A);
  Color get deepOrange50 => Color(0XFFFFEAE2);
  // Gray
  Color get gray100 => Color(0XFFF2F2F2);
  Color get gray200 => Color(0XFFE9E9E9);
  Color get gray400 => Color(0XFFB6B6B6);
  Color get gray50 => Color(0XFFF8F8F8);
  Color get gray700 => Color(0XFF5B5B5B);
  Color get gray900 => Color(0XFF1B1B1B);
  // Indigo
  Color get indigo50 => Color(0XFFE5EEF4);
  Color get indigoA100 => Color(0XFF9989EA);
  // Lime
  Color get lime900 => Color(0XFF99512E);
  // Orange
  Color get orange50 => Color(0XFFFFEBDD);
  // Pink
  Color get pink300 => Color(0XFFFC5C7D);
  // Red
  Color get redA200 => Color(0XFFFF4747);
  // Teal
  Color get teal500 => Color(0XFF00AA6C);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
